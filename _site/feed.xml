<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cheat Sheets</title>
    <description>Save time with cheat sheets!
</description>
    <link>http://localhost:4000/cheatsheets/</link>
    <atom:link href="http://localhost:4000/cheatsheets/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 11 Feb 2018 16:12:38 +0000</pubDate>
    <lastBuildDate>Sun, 11 Feb 2018 16:12:38 +0000</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Quick tips on images and layers</title>
        <description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/cheatsheets/docker/Spinning-up-the-first-Docker-container.html&quot;&gt;this post&lt;/a&gt;
I have described the difference between an image and a container, how to build
an image and how to spin up a container.
&lt;br /&gt;
&lt;br /&gt;
In this post I will focus on the images and briefly describe how the layered
system used by Docker works and give some tips about it.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Docker images work on a layered system. This means that all the single changes
we make to an image will add an extra layer to the image.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/cheatsheets/assets/docker/img/docker-layers.png&quot; alt=&quot;Docker layers&quot; width=&quot;600&quot; height=&quot;400&quot; /&gt;
    &lt;figcaption&gt;Fig 1. Docker layers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This figure was actually taken from the official Docker documentation website.
&lt;br /&gt;
As we can see the image layers are only readable layers and we can only write
to container layers.
&lt;br /&gt;
It means that we can have multiple containers reading from the same image,
without the need of copying the whole content of an image every time we run a
container.
&lt;br /&gt;
To be able to achieve this Docker uses Copy-On-Write (COW) strategy, which means
that a resource is copied to the container layer only when it is modified. This
is very important for performance and memory space.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;First tip: Building the image&lt;/h2&gt;
&lt;p&gt;Each step of the building process adds a new layers to the image, which means
we should try to put the the most changing items at the bottom of our
Dockerfile, like in this example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# base image&lt;/span&gt;
FROM python:rc-alpine

&lt;span class=&quot;c&quot;&gt;# set entry working directory&lt;/span&gt;
WORKDIR /usr/src/app

&lt;span class=&quot;c&quot;&gt;# expose port to access the app&lt;/span&gt;
EXPOSE 8000

&lt;span class=&quot;c&quot;&gt;# command to run&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;./helloworld.py&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# copy app to the image&lt;/span&gt;
COPY ./helloworld.py /usr/src/app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see the copy of “helloworld.py” takes place at the bottom of our
Dockerfile, because it is the most changing item. This allows us to not recreate
the same layer over and over again and therefore allows us faster build times.
&lt;br /&gt;
Bare in mind that a Dockerfile should be easy to read and easy to understand, so
try to reconcile both worlds.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second tip: The &quot;&amp;lt; none &amp;gt; images&quot;&lt;/h2&gt;
&lt;p&gt;These called “&amp;lt; none &amp;gt; images” are actually layers and there are two types of
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; none &amp;gt;&lt;/code&gt; layers: The “good” ones and the “bad” ones.
&lt;br /&gt;
&lt;br /&gt;
Starting with the “good” ones, when we pull an image we pull all of its layers
and they are all connected to each other, Docker only gives a name to the
last one. These are the ones we see when we run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images -a&lt;/code&gt;.
&lt;br /&gt;
&lt;br /&gt;
The “bad” ones (so called dangling images), are the ones left when we recreate
an image, they are called dangling images because they are not connected to
anything.
&lt;br /&gt;
&lt;br /&gt;
We can get rid of them by running the following command:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rmi $(docker images --quiet --force=dangling=true)&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
If you do not want the error message when there are no dangling images you can
run the following command (this will depend on your OS):
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images --quiet --force=dangling=true | xargs --no-run-if-empty docker rmi&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
Use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images --quiet --force=dangling=true | xargs --no-run-if-empty docker rmi -f&lt;/code&gt;
to force.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Feb 2018 12:54:52 +0000</pubDate>
        <link>http://localhost:4000/cheatsheets/docker/Quick-tips-on-images-and-layers.html</link>
        <guid isPermaLink="true">http://localhost:4000/cheatsheets/docker/Quick-tips-on-images-and-layers.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Spinning up a container with Docker Compose</title>
        <description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Docker Compose is usually used to define and spin up multiple containers with
just one command, but it can also be used to spin a single instance.
&lt;br /&gt;
&lt;br /&gt;
In this post I will describe how to build a docker-compose.yml and run a single
container instance, using the example of
&lt;a href=&quot;/cheatsheets/docker/Spinning-up-the-first-Docker-container.html&quot;&gt;my previous post&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;The process:&lt;/h2&gt;
&lt;p&gt;1. Create a file called “docker-compose.yml” with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Docker Compose version&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hello-world&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# context path&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Dockerfile name&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello-world:custom&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# the image will be created with this name and tag&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello-world&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:8000&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2. Run the following command:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
Note that this will automatically build the image (if it does not already
exist), unless we explicitly state that we do not want it with &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-build&lt;/code&gt;
flag.
&lt;br /&gt;
This will also create a network for the services to connect to, but we won’t
care about this for now, since we only have one instance running in this example.
&lt;br /&gt;
&lt;br /&gt;
You can also build the image with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;.
&lt;br /&gt;
&lt;br /&gt;
3. See the container running:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
4. Access to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; and see the “Hello World!” message!
&lt;br /&gt;
&lt;br /&gt;
5. Stop the running container:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose down&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
Note that this command will automatically stop and remove the container as well
as remove the created network.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Feb 2018 10:54:52 +0000</pubDate>
        <link>http://localhost:4000/cheatsheets/docker/Spinning-up-a-container-with-Docker-Compose.html</link>
        <guid isPermaLink="true">http://localhost:4000/cheatsheets/docker/Spinning-up-a-container-with-Docker-Compose.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Spinning up the first Docker container</title>
        <description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is Cheat Sheets so I will just give a rather short introduction to Docker
containers.
&lt;br /&gt;
&lt;br /&gt;
Containers allow us to deploy an application on any machine regardless its
environment, which means they will run the same way on every host machine.
&lt;br /&gt;
They differ from virtual machines because they do not need to be shipped with
an entire OS or hardware abstraction tools (that a virtual machine requires),
which makes them very lightweight.
&lt;br /&gt;
Still they are also isolated from the surrounding environment, by making use of
namespaces and cgroups, which are a part of the kernel, that determine what
processes can see and how much they can use.
&lt;br /&gt;
&lt;br /&gt;
In this post I will describe the difference between an image and a container
as well as the process to build an image and spin up a container. I will also
talk about the cleaning up process.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Image and container&lt;/h2&gt;
&lt;p&gt;To understand the following steps we need to understand the difference between
an image and a container.
Think of an image as a box, where you just put your application (and its
dependencies) inside, and the container as the running instance of what is
inside that box. The box is what you ship and what is inside the box is what
you use.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Build the image&lt;/h2&gt;
&lt;p&gt;1. Create a directory for your image:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir &amp;lt;dir name&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
2. Change path to your directory:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd &amp;lt;dir name&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
3. Create a file called “helloworld.py” with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;http.server&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPServer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;http.server&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseHTTPRequestHandler&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPStatus&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello World!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server is up and running!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server will be stopped and connection closed!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a simple program written in Python that will display a page with “Hello
World!” at the following address: 0.0.0.0:8000.
&lt;br /&gt;
Note that this is a Python program but it could be anything!
&lt;br /&gt;
&lt;br /&gt;
4. Create a file called “Dockerfile” with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# base image&lt;/span&gt;
FROM python:rc-alpine

&lt;span class=&quot;c&quot;&gt;# set entry working directory&lt;/span&gt;
WORKDIR /usr/src/app

&lt;span class=&quot;c&quot;&gt;# expose port to access the app&lt;/span&gt;
EXPOSE 8000

&lt;span class=&quot;c&quot;&gt;# command to run&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;./helloworld.py&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# copy app to the image&lt;/span&gt;
COPY ./helloworld.py /usr/src/app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
5. Build the image:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t &amp;lt;image name&amp;gt;:&amp;lt;tag&amp;gt; &amp;lt;context path&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
Where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;image name&amp;gt;&lt;/code&gt; is the name you want for the new image, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; is the tag
that you want to associate with the image (if you do not provide a tag it will
be “latest”) and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context path&amp;gt;&lt;/code&gt; the path where your files to be inserted in
the image and Dockerfile are (in this case the path to your created directory).
&lt;br /&gt;
&lt;br /&gt;
This will pull &lt;code class=&quot;highlighter-rouge&quot;&gt;python:rc-alpine&lt;/code&gt; image from
&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt; registry to your local registry, and
execute the following commands.
&lt;br /&gt;
&lt;br /&gt;
6. Check the image was created:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Spin up the container&lt;/h2&gt;
&lt;p&gt;1. Spin up the container:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p &amp;lt;host port&amp;gt;:8000 --name &amp;lt;container name&amp;gt; &amp;lt;image name&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
Where &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; stands for detached, which means your container will run in the
background, &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; the port mapping, being the left side of &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; the port of the
host machine and the right side the port of the container (the one we exposed),
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;container name&amp;gt;&lt;/code&gt; the name of the container that will be created,
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;image name&amp;gt;&lt;/code&gt; the name of the image from which you want to spin up your
container (the one we created) and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; the tag of the image from which you
want to spin up your container.
&lt;br /&gt;
&lt;br /&gt;
2. See the container running:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
3. Access to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:&amp;lt;host port&amp;gt;&lt;/code&gt; (being &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;host port&amp;gt;&lt;/code&gt; the host port
mapped to the container) and see the “Hello World!” message!
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;The cleaning up process&lt;/h2&gt;
&lt;p&gt;1. Stop the container:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop &amp;lt;container name&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
2. Check if the container is no longer running:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
3. Remove the container:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm &amp;lt;container name&amp;gt;&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
4. Check if the container was removed:
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Feb 2018 14:27:52 +0000</pubDate>
        <link>http://localhost:4000/cheatsheets/docker/Spinning-up-the-first-Docker-container.html</link>
        <guid isPermaLink="true">http://localhost:4000/cheatsheets/docker/Spinning-up-the-first-Docker-container.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
  </channel>
</rss>
